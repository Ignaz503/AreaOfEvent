@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client;
@using AreaOfEvent.Shared.Chatting;
@inject NavigationManager navManager
@implements IAsyncDisposable

<div class="form-group">
  <label>
    User:
    <input @bind="userInput" />
  </label>
</div>
<div class="form-group">
  <label>
    Message:
    <input @bind="messageInput" size="50" />
  </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr />

<ul id="messageList">
  @foreach (var message in messages)
  {
    <li>@message</li>
  }
</ul>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new();
    private string userInput;
    private string messageInput;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
      hubConnection = new HubConnectionBuilder()
        .WithUrl(
          navManager.ToAbsoluteUri( IChatServerMethods.EndpointName )//,
          //options => options.AccessTokenProvider = () =>
          //{
          //  aaaaaaa
          //} 
          )
        .Build();

      hubConnection.On<string, string>( nameof( IChatClientMethods.ReceiveMessage ),
        ( user, message ) =>
        {
          var msg = $"{user}: {message}";
          messages.Add( msg );
          StateHasChanged();
        } );
      await hubConnection.StartAsync();



      await base.OnInitializedAsync();
    }

    async Task Send() => await hubConnection.SendAsync( nameof( IChatServerMethods.SendMessage ), userInput, messageInput );

    public async ValueTask DisposeAsync()
    {
      if (hubConnection is not null)
      {
        await hubConnection.DisposeAsync();
      }
    }
}
